/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
)

type secretPostBody struct {
	Secret           string `json:"secret"`
	ExpireAfterViews int    `json:"expireAfterViews"`
	ExpireAfter      int    `json:"expireAfter"`
}

type JsonError struct {
	Message string `json:"message"`
}

func respondWithError(err error, w http.ResponseWriter, code int) {
	writeJSON(w, &JsonError{
		Message: err.Error(),
	}, code)
}

func AddSecret(s *inMemoryStore) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		decoder := json.NewDecoder(r.Body)
		var postData secretPostBody
		err := decoder.Decode(&postData)

		if err != nil {
			respondWithError(err, w, http.StatusInternalServerError)
			return
		}

		secret, err := s.addSecret(postData.Secret, postData.ExpireAfterViews, postData.ExpireAfter)

		if err != nil {
			respondWithError(err, w, http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusCreated)

		if err := json.NewEncoder(w).Encode(secret); err != nil {
			respondWithError(err, w, http.StatusInternalServerError)
			return
		}
	}
}

func GetSecretByHash(s *inMemoryStore) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		secret, err := s.readSecret(mux.Vars(r)["hash"])
		if err != nil {
			respondWithError(err, w, http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		if err := json.NewEncoder(w).Encode(secret); err != nil {
			respondWithError(err, w, http.StatusInternalServerError)
			return
		}
	}
}
